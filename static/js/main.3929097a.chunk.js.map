{"version":3,"sources":["mario.png","Geojson.js","Nuevo.js","Collapse.js","MapComponent1.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GeojsonLayer","props","myStyle","weight","opacity","fillOpacity","fillColor","mousemove","event","target","setStyle","color","state","onEachContry","nameunit","layer","names","properties","Nombre","den","populationtotalsais_otdensit","bindPopup","on","click","colorChange","setState","value","data","console","log","info","this","FeatureGroup","map","f","index","GeoJSON","key","style","onEachFeature","url","fetchData","fetch","then","r","json","features","error","React","Component","Pop","useState","activeMuni","setActiveMuni","muniData","muni","Marker","position","geometry","coordinates","onClick","Popup","onClose","className","width","height","id","Collapse","onGeojsonToggle","e","geojsonvisible","currentTarget","checked","visibility","geojsonvisible2","toggleVisibility","bind","Button","onChange","class","src","mario","alt","MapComponent1","lat","lng","zoom","maxZoom","Map","ref","center","TileLayer","attribution","Geojson","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3929097a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mario.add73c07.png\";","import React from 'react';\r\nimport { GeoJSON, FeatureGroup,  } from 'react-leaflet';\r\n\r\n\r\n class GeojsonLayer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n   \r\n      data:[],\r\n     \r\n     color:\"white\"\r\n    };\r\n  \r\n    console.log('constructor')\r\n  }\r\n\r\n  myStyle = () => {\r\n    return {\r\n      weight: 0.5,\r\n      opacity: 2,\r\n      fillOpacity: 0.5,\r\n      fillColor: 'red',\r\n  \r\n     \r\n    }\r\n  };\r\n  mousemove = (event)=>{\r\n    event.target.setStyle({\r\n      color:\"white\",\r\n       fillColor:this.state.color,\r\n     \r\n   });\r\n  }\r\n\r\n\r\n   onEachContry= ( nameunit, layer)=>{\r\n     const names= nameunit.properties.Nombre;\r\n     const den= nameunit.properties.populationtotalsais_otdensit\r\n     layer.bindPopup(\"Municipio de\"+\" \"+\" \"+  names +\" \"+\" \"+\"densidad Poblacional año 2019: \"+\"\"+ \"\" +den+\" \"+\"hab./km²\" );\r\n\r\n     layer.on({\r\n       click: this.mousemove,\r\n      \r\n    });\r\n   };\r\n   colorChange=(event)=>{\r\n    this.setState({color: event.target.value})\r\n  }\r\n  render() {\r\n   console.log('render')\r\n   console.info(this.state.data)\r\n    return (\r\n      <div>\r\n      <FeatureGroup>\r\n        {this.state.data.map((f, index) => {\r\n          return <GeoJSON key={index} data={f} style={this.myStyle} onEachFeature={this.onEachContry}>\r\n            \r\n          </GeoJSON>\r\n        })}\r\n      </FeatureGroup>\r\n    \r\n      </div>\r\n    );\r\n    \r\n  }\r\n  componentDidMount() {\r\n    if (this.props.url) {\r\n      this.fetchData(this.props.url);\r\n    }\r\n     \r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    console.log('will unmount');\r\n\r\n  }\r\n  fetchData(url) {\r\n    \r\n    console.log('url')\r\n    let request = fetch(url);\r\n \r\n    request\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        this.setState({\r\n          data: data.features\r\n        });\r\n      }, (error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n   }\r\n   export default GeojsonLayer;\r\n   \r\n  \r\n\r\n","import React from \"react\";\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport Iframe from 'react-iframe';\r\nimport * as muniData from \"./municipalities.json\";\r\n\r\n\r\n\r\n\r\nexport default function Pop() {\r\n\r\n  const [activeMuni,setActiveMuni]= React.useState(null);\r\n\r\n  return ( <div> \r\n   \r\n    {muniData.features.map(muni =>\r\n    <Marker\r\n     key={muni.properties.url}\r\n     position={[\r\n       muni.geometry.coordinates[1],\r\n       muni.geometry.coordinates[0]\r\n     ]}\r\n\r\n\r\n      onClick={() => {\r\n        setActiveMuni(muni);\r\n\r\n      }}\r\n\r\n     />\r\n\r\n     )}\r\n     {activeMuni && (\r\n       <Popup\r\n       position={[\r\n        activeMuni.geometry.coordinates[1],\r\n        activeMuni.geometry.coordinates[0]\r\n      ]}\r\n      onClose={() =>{\r\n        setActiveMuni(null);\r\n\r\n      }}\r\n       >\r\n         <div className=\"center\">\r\n         <h1 className= \"infoHeader\" >Municipio : {activeMuni.properties.nameunit}</h1>\r\n       \r\n\r\n         <Iframe url= {\"https://www.ine.es//jaxiT3/WidgetServlet.htm?w_grafica=1&t=2886&ratio=0.9&nocab=1&btnWidgetGrafico.x=19&btnWidgetGrafico.y=19&rows=28505&columns=28506&columns=p_per&columns=p_oper&oper=22&cri28505=\"+activeMuni.properties.url+\"&cri28506=138939&periodo=28~2019&periodo=28~2018&periodo=28~2017&periodo=28~2016&periodo=28~2015&periodo=28~2014&periodo=28~2013&periodo=28~2012&periodo=28~2011&periodo=28~2010&periodo=28~2009&periodo=28~2008&periodo=28~2007&periodo=28~2006&periodo=28~2005&periodo=28~2004&periodo=28~2003&periodo=28~2002&periodo=28~2001&periodo=28~2000&periodo=28~1999&periodo=28~1998&periodo=28~1997&periodo=28~1996&columnas_grafico=per&ejeHorizontal=per&tipoGrafico=lineas&L=0&p_widgetFormGrafico=1&nult=&w_legend=false&w_contorno_col=89BEBA&w_titulo=true&w_ancho_widget=574px&w_alto_widget=291px%27#!tabs-grafico'\"}\r\n\r\n        width=\"400px\"\r\n        height=\"400px\"\r\n        id=\"myId\"\r\n        className=\"myClassname\"\r\n        position=\"relative\"/>\r\n         </div>\r\n        </Popup>\r\n\r\n     )}\r\n\r\n</div>\r\n    \r\n  );\r\n}\r\n","import React from 'react';\r\nimport mario from './mario.png'\r\nimport {Button} from 'reactstrap'\r\n\r\nclass Collapse extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    visibility: false,\r\n   \r\n    geojsonvisible2: false,\r\n    };\r\n    // change code below this line\r\n    this.toggleVisibility = this.toggleVisibility.bind(this);\r\n    // change code above this line\r\n    }\r\n    // change code below this line\r\n    \r\n    toggleVisibility(){\r\n    this.setState({\r\n    visibility: !this.state.visibility\r\n    })\r\n    }\r\n     onGeojsonToggle = (e) => {\r\n    \r\n    this.setState({\r\n      geojsonvisible: e.currentTarget.checked\r\n      \r\n  \r\n    });\r\n    \r\n    \r\n  }\r\n \r\n    // change code above this line\r\n    render() {\r\n    if (this.state.visibility) {\r\n    return (\r\n  \r\n    <div>\r\n         \r\n      \r\n          <div className=\"geojson-toggle\">\r\n            <Button className=\"mostrar\" onClick={this.toggleVisibility}\r\n              value={this.state.visibility} onChange={this.toggleVisibility} \r\n              > \r\n             <div className=\"parrafos\"> <p>Esta aplicación nos ofrece las gráficas de migración en los municipios de Asturias</p></div>\r\n             <p class=\"text-primary\">Información proporcionada por el INE</p>\r\n             <div />\r\n            </Button>\r\n          </div>\r\n     \r\n      \r\n           \r\n       \r\n    \r\n  </div>\r\n            \r\n    );\r\n    } else {\r\n    return (\r\n    \r\n       <div><button className=\"mostrar\" onClick={this.toggleVisibility}>\r\n         \r\n         <img width=\"50px\" className=\"img-fluid\"src={mario} alt=\"logo\" />\r\n         \r\n         </button></div>\r\n    \r\n    );\r\n    }\r\n    }\r\n  };\r\n  export default Collapse;","import React from 'react';\r\nimport GeojsonLayer from './Geojson';\r\nimport {Map, TileLayer } from 'react-leaflet';\r\nimport Pop from './Nuevo';\r\nimport Collapse from './Collapse'\r\n\r\n\r\nexport default class MapComponent1 extends React.Component {\r\n    \r\n   state = {\r\n    lat: 40.46751056468401,\r\n    lng: -3.80185427963720,\r\n    zoom: 18,\r\n    maxZoom: 20,\r\n   geojsonvisible: true,\r\n  };\r\n  onGeojsonToggle = (e) => { \r\n    this.setState({\r\n      geojsonvisible: e.currentTarget.checked\r\n\r\n    });\r\n  }\r\n  \r\n \r\n  render(){\r\n        return (\r\n<div>\r\n            <Map  ref={Map => this.map = Map} center={[43.2159, -5.5140]} zoom={9}>\r\n            <TileLayer\r\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\r\n            />\r\n             \r\n            {this.state.geojsonvisible && \r\n           <GeojsonLayer url=\"Pop.json\"  />\r\n            }\r\n            \r\n            <Pop/>\r\n            { !this.state.visibility &&  \r\n              <Collapse  onChange={this.geojsonvisible} /> \r\n              }\r\n           \r\n           \r\n            </Map>\r\n           \r\n            </div>\r\n        )\r\n\r\n    }\r\n  \r\n        \r\n}\r\n","import React from 'react';\nimport MapComponent1 from './MapComponent1'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nclass App extends React.Component{ \n \n state = {\n \n }\n\n \n  render() {\n  \n  return(\n      <div className=\"App\">\n        <h1 ><div className=\"App-title\">Migraciones en Asturias 1996-2019</div></h1>\n    <MapComponent1/>\n    \n  </div>\n  ); \n  }\n}\nexport default App\n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}